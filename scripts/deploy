#!/usr/bin/env python3

import os
import tempfile
import subprocess
import argparse

BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--env", "-E", required=True, help="Deploy environment type")
    parser.add_argument("--image", "-i", required=True, help="Docker image tag")
    parser.add_argument("--token", "-t", help="Kubeconfig token")
    return parser.parse_args()

def render_template_file(name, args):
    template = open(os.path.join(BASE_DIR, "deploy", name), 'r').read()
    output = template.format(**args)
    assert "{OCT" not in output
    tf = tempfile.NamedTemporaryFile(mode='w')
    print(output)
    tf.write(output)
    tf.flush()
    return tf
    
def main():
    args = parse_args()
    if args.env == "prod":
        domain_name = "oct-api.com"
        ns = 'oct-api'
    elif args.env == "preview":
        domain_name = "preview.oct-api.com"
        ns = 'oct-api-preview'
    else:
        raise Exception("Unknown environment type: %s" % args.env)
    vs = {
        'OCT_IMAGE': args.image,
        'OCT_DOMAIN_NAME': domain_name,
        'OCT_ENV': args.env,
    }
    tf = render_template_file("template.yaml", vs)

    kcf = args.env + ".kubeconfig"
    if args.token:
        vs = {
            'OCT_TOKEN': args.token or "",
        }
    else:
        vs = {}
    kc = render_template_file(kcf, vs)
    cmd = ['kubectl', '--kubeconfig', kc.name,
           '-n', ns,
           'apply', '-f', tf.name]
    r = subprocess.call(cmd)
    assert r == 0

main()
